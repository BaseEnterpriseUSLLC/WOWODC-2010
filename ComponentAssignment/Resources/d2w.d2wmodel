{
  "rules" = (
    {"author" = "100"; "class" = "com.webobjects.directtoweb.Rule"; "documentation" = "(2) This custom assignment does not need a value or a qualifier.  The enumChoices RHS key determines the method that will be fired by the assignment class.  The assignment will supply an unfiltered list of enum choices for any enum that is an attribute on your EOs."; "lhs" = {"class" = "com.webobjects.eocontrol.EOAndQualifier"; "qualifiers" = ({"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "RuleIsDisabled"; "selectorName" = "isEqual"; "value" = "YES"; }); }; "rhs" = {"class" = "your.app.assignments.EnumAssignment"; "keyPath" = "enumChoices"; }; }, 
    {"author" = "100"; "class" = "com.webobjects.directtoweb.Rule"; "documentation" = "(2) restrictedChoiceKey gives you the opportunity to define what choices are available in your edit relationship popup.  It might be a method off your object like it is here, but it may also be a key defined on the d2wContext.  Be aware that the key resolves off the component, not the context itself."; "lhs" = {"class" = "com.webobjects.eocontrol.EOAndQualifier"; "qualifiers" = ({"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "RuleIsDisabled"; "selectorName" = "isEqual"; "value" = "YES"; }); }; "rhs" = {"class" = "com.webobjects.directtoweb.Assignment"; "keyPath" = "restrictedChoiceKey"; "value" = "d2wContext.enumChoices"; }; }, 
    {"author" = "100"; "class" = "com.webobjects.directtoweb.Rule"; "documentation" = "(3) Here, we've cloned the ERD2WEditToOneRelationship and modified it to do enum things.  This gives us more flexibility when localizing our enum names."; "lhs" = {"class" = "com.webobjects.eocontrol.EOAndQualifier"; "qualifiers" = ({"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "task"; "selectorName" = "isEqualTo"; "value" = "edit"; }, {"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "entity.name"; "selectorName" = "isEqualTo"; "value" = "Car"; }, {"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "propertyKey"; "selectorName" = "isEqualTo"; "value" = "color"; }); }; "rhs" = {"class" = "com.webobjects.directtoweb.Assignment"; "keyPath" = "componentName"; "value" = "EditEnum"; }; }, 
    {"author" = "100"; "class" = "com.webobjects.directtoweb.Rule"; "documentation" = "(1) keyWhenRelationship is the key called on object to determine the display string for that object.  For regular EOs it is typically \"userPresentableDescription.\"  For enums, \"name\" is more appropriate."; "lhs" = {"class" = "com.webobjects.eocontrol.EOAndQualifier"; "qualifiers" = ({"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "RuleIsDisabled"; "selectorName" = "isEqual"; "value" = "YES"; }, {"class" = "com.webobjects.eocontrol.EOAndQualifier"; "qualifiers" = ({"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "task"; "selectorName" = "isEqualTo"; "value" = "edit"; }, {"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "entity.name"; "selectorName" = "isEqualTo"; "value" = "Car"; }, {"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "propertyKey"; "selectorName" = "isEqualTo"; "value" = "color"; }); }); }; "rhs" = {"class" = "com.webobjects.directtoweb.Assignment"; "keyPath" = "keyWhenRelationship"; "value" = "name"; }; }, 
    {"author" = "100"; "class" = "com.webobjects.directtoweb.Rule"; "documentation" = "(3) This key is merely used to demonstrate that we can switch back from using keys like Color.BLACK to simple keys like BLACK if we would like using our custom EditEnum component. I chose not to use keyWhenRelationship simply because enums are attributes and it seemed ambiguous."; "lhs" = {"class" = "com.webobjects.eocontrol.EOAndQualifier"; "qualifiers" = ({"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "task"; "selectorName" = "isEqualTo"; "value" = "edit"; }, {"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "entity.name"; "selectorName" = "isEqualTo"; "value" = "Car"; }, {"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "propertyKey"; "selectorName" = "isEqualTo"; "value" = "color"; }); }; "rhs" = {"class" = "com.webobjects.directtoweb.Assignment"; "keyPath" = "destinationDisplayKey"; "value" = "name"; }; }, 
    {"author" = "100"; "class" = "com.webobjects.directtoweb.Rule"; "documentation" = "(1)(3) This key indicates the displayed keys in your menu will be localized. Localized values are located in the Resources/Lang.lproj/Localizable.strings file."; "lhs" = {"class" = "com.webobjects.eocontrol.EOAndQualifier"; "qualifiers" = ({"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "task"; "selectorName" = "isEqualTo"; "value" = "edit"; }, {"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "entity.name"; "selectorName" = "isEqualTo"; "value" = "Car"; }, {"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "propertyKey"; "selectorName" = "isEqualTo"; "value" = "color"; }); }; "rhs" = {"class" = "com.webobjects.directtoweb.BooleanAssignment"; "keyPath" = "localizeDisplayKeys"; "value" = "true"; }; }, 
    {"author" = "100"; "class" = "com.webobjects.directtoweb.Rule"; "documentation" = "(1) ERD2WEditToOneRelationship is great. It can actually manage a relationship between two EOs, two POJOs, or an EO and a POJO.  Because of this, we are able to use it to manage Enum attributes just as easily as we would manage a relationship to an enumeration entity."; "lhs" = {"class" = "com.webobjects.eocontrol.EOAndQualifier"; "qualifiers" = ({"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "RuleIsDisabled"; "selectorName" = "isEqual"; "value" = "YES"; }, {"class" = "com.webobjects.eocontrol.EOAndQualifier"; "qualifiers" = ({"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "task"; "selectorName" = "isEqualTo"; "value" = "edit"; }, {"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "entity.name"; "selectorName" = "isEqualTo"; "value" = "Car"; }, {"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "propertyKey"; "selectorName" = "isEqualTo"; "value" = "color"; }); }); }; "rhs" = {"class" = "com.webobjects.directtoweb.Assignment"; "keyPath" = "componentName"; "value" = "ERD2WEditToOneRelationship"; }; }, 
    {"author" = "100"; "class" = "com.webobjects.directtoweb.Rule"; "documentation" = "(1) restrictedChoiceKey gives you the opportunity to define what choices are available in your edit relationship popup.  It might be a method off your object like it is here, but it may also be a key defined on the d2wContext.  Be aware that the key resolves off the component, not the context itself."; "lhs" = {"class" = "com.webobjects.eocontrol.EOAndQualifier"; "qualifiers" = ({"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "RuleIsDisabled"; "selectorName" = "isEqual"; "value" = "YES"; }, {"class" = "com.webobjects.eocontrol.EOAndQualifier"; "qualifiers" = ({"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "task"; "selectorName" = "isEqualTo"; "value" = "edit"; }, {"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "entity.name"; "selectorName" = "isEqualTo"; "value" = "Car"; }, {"class" = "com.webobjects.eocontrol.EOKeyValueQualifier"; "key" = "propertyKey"; "selectorName" = "isEqualTo"; "value" = "color"; }); }); }; "rhs" = {"class" = "com.webobjects.directtoweb.Assignment"; "keyPath" = "restrictedChoiceKey"; "value" = "object.availableColors"; }; }
  ); 
}