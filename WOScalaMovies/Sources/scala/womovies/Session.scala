// Generated by the WOLips Templateengine Plug-in at Aug 15, 2009 2:15:59 AM
package scala.womovies

import scala.reflect.BeanProperty

import com.webobjects.appserver.{WOApplication, WOComponent, WOContext, WOActionResults, WOSession}

import org.squeryl.adapters.H2Adapter
import org.squeryl.{Query, Session => SQSession, SessionFactory}
import org.squeryl.PrimitiveTypeMode._

import scala.womovies.model._

import scala.collection.mutable.ListBuffer
import scala.collection.JavaConversions._

class Session extends WOSession {
	println("New Session created: " + sessionID)
  
  	// constructor logic
	Class.forName("org.h2.Driver")
	private val dbPath = WOApplication.application.resourceManager.pathForResourceNamed("Movies.h2.db", null, null)
	private val db = dbPath.substring(0, dbPath indexOf ".h2.db")
	SessionFactory.concreteFactory = Some(() => SQSession.create( 
			java.sql.DriverManager.getConnection("jdbc:h2:file:" + db, "", ""),
			new H2Adapter
	))
	
	println("JDBC url: jdbc:h2:file:" + db)

	
	// accessors
	val numberOfObjectsPerBatch = 10
	var currentBatchIndex = 0;
	
	lazy val moviesCount = {
		transaction {
			SQSession.currentSession.setLogger(println(_))		// turn on SQL logging
			Movie.tally
		}
	}
	
	val pageCount = Math.ceil(moviesCount/numberOfObjectsPerBatch).toInt
	private def offset = numberOfObjectsPerBatch * currentBatchIndex
	
	def movies: java.util.List[Movie] = {
		transaction {
			SQSession.currentSession.setLogger(println(_))		// turn on SQL logging
			Movie.fetch(titleString, categoryString).page(offset, numberOfObjectsPerBatch).toList
		}	
	}
	
	private def categoryString = 
		if (category == null) None
		else Some(category)
		
	private def titleString = 
		if (title == null) None
		else Some(title)
		
	@BeanProperty var title: String = null
	@BeanProperty var category: String = null
	@BeanProperty var movie: Movie = null
	
	def studio = {
		transaction {
			//Session.currentSession.setLogger(println(_))		// turn on SQL logging
			movie.studio
		}
	}
	
	def studioName = studio match {
		case Some(s) => s.name
		case None => ""
	}

}
